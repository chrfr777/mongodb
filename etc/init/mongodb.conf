# Ubuntu upstart file at /etc/init/mongodb.conf

limit nofile 20000 20000
kill timeout 10

pre-start script
  # we do this in monit.conf as well, but we can't wait for that
  curl="curl --retry 3 --silent --show-error --fail"
  hostname_public=$($curl http://169.254.169.254/latest/meta-data/public-hostname)
  echo "host name = ["$hostname_public"]"
  hostname $hostname_public
  echo $hostname_public > /etc/hostname

  mkdir -p /var/mongodb/run
  chown -R mongodb.mongodb /var/mongodb/run

  arbiter=$(/root/is_arbiter.sh)
  if [ "x$arbiter" = "xno" ]; then
    /root/create_mongodb_volume.sh

    # before mongo 2.2 we did (now we drop de local database when we run)
    #new=$(/root/new_set.sh)
    # if we are new, make sure we start without previous replica set conf
    #if [ "x$new" = "xyes" ]; then
	#  rm -rf /var/mongodb/lib/local.*
    #fi
  else
	rm -rf /var/mongodb/lib/ /var/mongodb/log /mnt/mongodb/log /var/run/mongodb
  fi

  mkdir -p /var/mongodb/lib /var/run/mongodb /var/mongodb/log /mnt/mongodb/log
  chown -R mongodb.mongodb /var/run/mongodb /var/mongodb /mnt/mongodb/log

  /root/init-backups
end script

post-start script
  # wait for listen on port 27017, if this fails we are fucked anyway
  while ! nc -q0 localhost 27017 </dev/null >/dev/null 2>&1; do
    sleep 1;
  done

  arbiter=$(/root/is_arbiter.sh)
  if [ "x$arbiter" = "xno" ]; then
    # we might be initial member of a new replica set
    new=$(/root/new_set.sh)

    # if we are, initiate the set, if not tell the primary we want to be part
    if [ "x$new" = "xyes" ]; then
	  # first delete the local database
      echo $(/usr/bin/mongo local --eval "db.dropDatabase()") >> /var/log/syslog
      echo $(/usr/bin/mongo --eval "rs.initiate()") >> /var/log/syslog
    else
      task="\"rs.add('`hostname`:27017')\""
      /root/add_task.sh "${task}"
    fi

    # add the full crontab
    /bin/cat /root/crontab | /usr/bin/crontab -
  else
    task="\"rs.addArb('`hostname`:27017')\""
    /root/add_task.sh "${task}"

    # arbiter does nothing, or relatively very little
    /bin/cat /dev/null | /usr/bin/crontab -
  fi
  /usr/bin/monit monitor mongodb
end script

pre-stop script
  /usr/bin/mongo --eval "if( rs.isMaster()) { rs.stepDown()}"

  # schedule us to be removed (by the primary)
  task="\"rs.remove('`hostname`:27017')\""
  /root/add_task.sh "${task}"
end script

start on runlevel [2345]
stop on runlevel RUNLEVEL=0 PREVLEVEL=2

script
  curl="curl --retry 3 --silent --show-error --fail"
  set_name=$($curl http://169.254.169.254/latest/user-data | grep '"name"' | sed 's/.*\:[ \t]*"\{0,1\}\([^,"]*\)"\{0,1\},\{0,1\}/\1/')


  ENABLE_MONGODB="yes"
  if [ -f /etc/default/mongodb ]; then . /etc/default/mongodb; fi
  if [ "x$ENABLE_MONGODB" = "xyes" ]; then
    arbiter=$(/root/is_arbiter.sh)
    if [ "x$arbiter" = "xno" ]; then
      exec start-stop-daemon --start --make-pidfile --pidfile /var/run/mongodb/mongodb.pid --chuid mongodb --exec  /usr/bin/mongod -- --rest --oplogSize 40960 --config /etc/mongodb.conf --replSet $set_name;
    else
      exec start-stop-daemon --start --make-pidfile --pidfile /var/run/mongodb/mongodb.pid --chuid mongodb --exec  /usr/bin/mongod -- --rest --config /etc/mongodb.conf --replSet $set_name --nojournal;
    fi
  fi
end script